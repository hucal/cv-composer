// Generated by CoffeeScript 1.9.2
var PI, add_to, camera, camera_far, controls, controls_active, i, j, k, len, len1, len2, make_line, make_p_line, make_p_point, make_plane, make_point, obj, r2, r2_objects, render, renderer, root_objects, s2, s2_objects, scene, time, transform, vec3, vec3_from_array;

if (!Detector.webgl) {
  Detector.addGetWebGLMessage;
}

scene = new THREE.Scene;

camera_far = 5000;

camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, camera_far);

renderer = new THREE.WebGLRenderer({
  antialias: true
});

renderer.setSize(window.innerWidth, window.innerHeight);

document.body.appendChild(renderer.domElement);

window.addEventListener('resize', function() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  return renderer.setSize(window.innerWidth, window.innerHeight);
});


/* utility functions */

vec3 = function(x, y, z) {
  return new THREE.Vector3(x, y, z);
};

vec3_from_array = function(p) {
  return vec3(p[0], p[1], p.length > 2 ? p[2] : 1);
};

PI = Math.PI;

add_to = function(c, o) {
  c.push(o);
  return o;
};

make_point = function(collection, size, color, opacity, detail) {
  if (opacity == null) {
    opacity = 1.0;
  }
  if (detail == null) {
    detail = 15;
  }
  return add_to(collection, new THREE.Mesh(new THREE.SphereGeometry(size, detail, detail), new THREE.MeshLambertMaterial({
    color: color,
    transparent: opacity !== 1.0,
    opacity: opacity
  })));
};

make_plane = function(collection, size, color, opacity) {
  if (opacity == null) {
    opacity = 1.0;
  }
  return add_to(collection, new THREE.Mesh(new THREE.PlaneGeometry(size, size), new THREE.MeshBasicMaterial({
    color: color,
    side: THREE.DoubleSide,
    transparent: opacity !== 1.0,
    opacity: opacity
  })));
};

make_line = function(collection, here, there, color, width, extend) {
  var geometry, v1, v1_orig, v2;
  if (width == null) {
    width = 1;
  }
  if (extend == null) {
    extend = true;
  }
  v1 = here instanceof THREE.Vector3 ? here : vec3_from_array(here);
  v2 = there instanceof THREE.Vector3 ? there : vec3_from_array(there);
  if (there) {
    v1_orig = v1.clone();
    v1.sub(v2);
    v1.setLength(camera_far);
    v1.add(v2);
    v2.sub(v1_orig);
    v2.setLength(camera_far);
    v2.add(v1_orig);
  }
  geometry = new THREE.Geometry;
  geometry.vertices.push(v1, v2);
  return add_to(collection, new THREE.Line(geometry, new THREE.LineBasicMaterial({
    color: color,
    linewidth: width
  })));
};

make_p_point = function(x, y, color) {
  var o1, o2, o3, o4;
  o1 = make_point(r2_objects, 0.01, color);
  o1.position.z = 1;
  o1.position.x = x;
  o1.position.y = y;
  o2 = make_line(root_objects, [-x, -y, -1], [x, y, 1], color);
  o3 = make_point(s2_objects, 0.0075, color);
  o3.position.copy(vec3(x, y, 1).normalize());
  o4 = make_point(s2_objects, 0.0075, color);
  o4.position.copy(vec3(-x, -y, -1).normalize());
  return [o1, o2, o3, o4];
};

make_p_line = function(p1, p2, color, opacity, draw_points) {
  var angle, o, v1, v2;
  if (opacity == null) {
    opacity = 1.0;
  }
  if (draw_points == null) {
    draw_points = false;
  }
  o = make_plane(root_objects, 3, color, opacity);
  v1 = vec3(p1[0], p1[1], 1);
  v2 = vec3(p2[0], p2[1], 1);
  make_line(r2_objects, v1.clone(), v2.clone(), color, 9);
  if (draw_points) {
    make_p_point(p1[0], p1[1], color);
    make_p_point(p2[0], p2[1], color);
  }
  v1.cross(v2);
  angle = v1.angleTo(vec3(0, 0, 1));
  o.rotation.setFromQuaternion(new THREE.Quaternion().setFromAxisAngle(vec3(1, 0, 0), angle));
  return o;
};


/* setup scene */

s2_objects = [];

r2_objects = [];

root_objects = [];

make_point(root_objects, 0.02, 0xffffff);

make_plane(root_objects, 2, 0xbbffbb);

make_p_point(0, 0, 0xff0000);

make_p_point(0.5, 0.5, 0xff0000);

make_p_line([0.25, 0.25], [-0.25, 0.25], 0xff00ff, 0.5, true);

s2 = make_point(s2_objects, 1, 0xffffff, 0.2, 90);

s2_objects.push(s2);

r2 = make_plane(r2_objects, 2, 0xffffbb);

r2.position.z = 1;

transform = (new THREE.Matrix4).set(2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0);

for (i = 0, len = root_objects.length; i < len; i++) {
  obj = root_objects[i];
  scene.add(obj);
}

for (j = 0, len1 = s2_objects.length; j < len1; j++) {
  obj = s2_objects[j];
  scene.add(obj);
}

for (k = 0, len2 = r2_objects.length; k < len2; k++) {
  obj = r2_objects[k];
  scene.add(obj);
}

scene.add(new THREE.AmbientLight(0x404040));

scene.add(new THREE.HemisphereLight(0xffffff, 0x404040, 1));


/* place camera and render */

controls = new THREE.OrbitControls(camera, renderer.domElement);

camera.position.z = 2;

time = -PI * 3 / 4;

camera.position.y = 3 * Math.sin(time);

camera.position.x = 3 * Math.cos(time);

camera.lookAt(vec3(0, 0, 0));

controls_active = true;

render = function() {
  requestAnimationFrame(render);
  renderer.render(scene, camera);
  if (controls_active) {
    controls.update;
  } else {
    time += 0.005;
    camera.position.y = 3 * Math.sin(time);
    camera.position.x = 3 * Math.cos(time);
    camera.lookAt(vec3(0, 0, 0));
  }
};

render();

//# sourceMappingURL=vis.js.map
